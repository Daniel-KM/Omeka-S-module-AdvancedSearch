<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var array $query
 *
 * Same as core template, with:
 * - use option to restrict to used terms in admin;
 * - more querier options, included sub-query;
 * - use chosen-select;
 * - short echo.
 */

$plugins = $this->getHelperPluginManager();
$status = $plugins->get('status');
$escape = $plugins->get('escapeHtml');
$translate = $plugins->get('translate');
$siteSetting = $plugins->get('siteSetting');
$formQuery = $plugins->get('formQuery');
$formSelect = $plugins->get('formSelect');
$queryInput = $plugins->get('queryInput');
$propertySelect = $plugins->get('propertySelect');
$dataTypeHelper = $plugins->get('dataType');

$isSiteRequest = $status->isSiteRequest();
$applyTemplates = $isSiteRequest ? $siteSetting('search_apply_templates') : false;
$usedTerms = !$isSiteRequest;

$resourceTypesToNames = ['item' => 'items', 'item-set' => 'item_sets', 'media' => 'media'];
$resourceName = $resourceTypesToNames[$this->resourceType ?? null] ?? 'items';

$selectMainDataType = new \Laminas\Form\Element\Select;
$selectMainDataType
    ->setOptions([
        'empty_option' => '',
        'value_options' => [
            'literal' => 'literal', // @translate
            'resource' => 'resource', // @translate
            'uri' => 'uri', // @translate
        ],
    ])
    ->setAttributes([
        'class' => 'query-text query-main-type chosen-select',
        'aria-label' => $translate('Properties'), // @translate
        'data-placeholder' => 'Select main data typeâ€¦', // @translate
    ]);

$queryInput = $queryInput();
$queryInput->setOption('query_resource_type', $resourceName);
if ($this->site) {
    $queryInput->setOption('query_preview_append_query', ['site_id' => $this->site->id()]);
}

// Prepare the property queries.
$properties = $query['property'] ?? [];
$properties = array_filter($properties, function ($value) {
    return isset($value['text']) ? '' !== trim($value['text']) : true;
});
if (!$properties) {
    $properties[] = [];
}

if (isset($query['search'])) {
    unset($properties[0]['joiner']);
    array_unshift($properties, [
        'property' => '',
        'type' => 'in',
        'text' => $query['search'],
    ]);
}

$queryOption = function ($value, array $search, $key, $text) {
    $selected = null;
    if (isset($search[$key]) && $value === $search[$key]) {
        $selected = ' selected';
    }
    return sprintf('<option value="%s"%s>%s</option>', $value, $selected, $text);
};
$queryText = function (array $search, $index) use ($escape, $translate) {
    $text = $search['text'] ?? null;
    return sprintf('<input type="text" class="query-text" name="%s" value="%s" aria-label="%s">',
        $escape("property[$index][text]"),
        $escape($text),
        $escape($translate('Query text')));
};

$optionsQuery = [];
if ($isSiteRequest) {
    if ($siteSetting('vocabulary_scope') === 'sitewide') {
        $optionsQuery['site_id'] = $this->layout()->site->id();
    } elseif ($siteSetting('vocabulary_scope') === 'cross-site') {
        $optionsQuery['used'] = true;
    }
}
?>

<div id="property-queries" class="field removable multi-value" role="group" aria-labelledby="by-value-label">
    <div class="field-meta">
        <span id="by-value-label" class="label"><?= $translate('Search by value') ?></span>
        <button type="button" class="add-value o-icon-add button" aria-label="<?= $translate('Add new value') ?>" title="<?= $translate('Add new value') ?>"></button>
    </div>
    <div class="inputs">
        <?php
        $index = 0;
        foreach ($properties as $property):
            $stem = "property[$index]";
            $propertyList = isset($property['property'])
                ? (is_array($property['property']) ? $property['property'] : [$property['property']])
                : [null];
            $isSubQuery = in_array($property['type'] ?? null, ['resq', 'nresq', 'lkq', 'nlkq']) && isset($property['text']) ? $property['text'] : null;
            $queryInput
                ->setName($stem . '[text]')
                ->setValue($isSubQuery ? $property['text'] : null);
        ?>
        <div class="value">
            <div class="value-common value-fields">
                <select class="joiner chosen-select" name="<?= $escape($stem . '[joiner]') ?>" aria-label="<?= $translate('Joiner') ?>">
                    <?= $queryOption('and', $property, 'joiner', $translate('AND')) ?>
                    <?= $queryOption('or', $property, 'joiner', $translate('OR')) ?>
                </select>
                <?= $propertySelect([
                    'name' => $stem . '[property]',
                    'attributes' => [
                        'class' => 'query-property chosen-select',
                        'value' => $propertyList,
                        'aria-label' => $translate('Properties'), // @translate
                        'multiple' => true,
                        'data-placeholder' => '[any property]', // @translate
                    ],
                    'options' => [
                        'empty_option' => '',
                        'apply_templates' => $applyTemplates,
                        'query' => $optionsQuery,
                        // Used terms in site are already managed by vocabulary scope, but only for items.
                        'used_terms' => $usedTerms,
                    ],
                ]) ?>
                <select class="query-type chosen-select" name="<?= $escape($stem . '[type]') ?>" aria-label="<?= $translate('Query type') ?>">
                    <optgroup label="<?= $translate('Value') ?>">
                        <?= $queryOption('eq', $property, 'type', $translate('is exactly')) ?>
                        <?= $queryOption('neq', $property, 'type', $translate('is not exactly')) ?>
                        <?= $queryOption('in', $property, 'type', $translate('contains')) ?>
                        <?= $queryOption('nin', $property, 'type', $translate('does not contain')) ?>
                        <?= $queryOption('sw', $property, 'type', $translate('starts with')) ?>
                        <?= $queryOption('nsw', $property, 'type', $translate('does not start with')) ?>
                        <?= $queryOption('ew', $property, 'type', $translate('ends with')) ?>
                        <?= $queryOption('new', $property, 'type', $translate('does not end with')) ?>
                        <?= $queryOption('near', $property, 'type', $translate('is similar to')) ?>
                        <?= $queryOption('nnear', $property, 'type', $translate('is not similar to')) ?>
                    </optgroup>
                    <optgroup label="<?= $translate('Resource') ?>">
                        <?= $queryOption('res', $property, 'type', $translate('is resource with ID')) ?>
                        <?= $queryOption('nres', $property, 'type', $translate('is not resource with ID')) ?>
                        <?= $queryOption('resq', $property, 'type', $translate('is resource matching query')) ?>
                        <?= $queryOption('nresq', $property, 'type', $translate('is not resource matching query')) ?>
                    </optgroup>
                    <optgroup label="<?= $translate('Linked resource') ?>">
                        <?= $queryOption('lex', $property, 'type', $translate('is a linked resource')) ?>
                        <?= $queryOption('nlex', $property, 'type', $translate('is not a linked resource')) ?>
                        <?= $queryOption('lres', $property, 'type', $translate('is linked with resource with ID (expert)')) ?>
                        <?= $queryOption('nlres', $property, 'type', $translate('is not linked with resource with ID (expert)')) ?>
                        <?= $queryOption('lkq', $property, 'type', $translate('is linked with resources matching query (expert)')) ?>
                        <?= $queryOption('nlkq', $property, 'type', $translate('is not linked with resources matching query (expert)')) ?>
                    </optgroup>
                    <optgroup label="<?= $translate('Count') ?>">
                        <?= $queryOption('ex', $property, 'type', $translate('has any value')) ?>
                        <?= $queryOption('nex', $property, 'type', $translate('has no values')) ?>
                        <?= $queryOption('exs', $property, 'type', $translate('has a single value')) ?>
                        <?= $queryOption('nexs', $property, 'type', $translate('has not a single value')) ?>
                        <?= $queryOption('exm', $property, 'type', $translate('has multiple values')) ?>
                        <?= $queryOption('nexm', $property, 'type', $translate('has not multiple values')) ?>
                    </optgroup>
                    <optgroup label="<?= $translate('Data type') ?>">
                        <?= $queryOption('dtp', $property, 'type', $translate('has data type')) ?>
                        <?= $queryOption('ndtp', $property, 'type', $translate('has not data type')) ?>
                        <?= $queryOption('tp', $property, 'type', $translate('has main type')) ?>
                        <?= $queryOption('ntp', $property, 'type', $translate('has not main type')) ?>
                        <?= $queryOption('tpl', $property, 'type', $translate('has type literal-like')) ?>
                        <?= $queryOption('ntpl', $property, 'type', $translate('has not type literal-like')) ?>
                        <?= $queryOption('tpr', $property, 'type', $translate('has type resource-like')) ?>
                        <?= $queryOption('ntpr', $property, 'type', $translate('has not type resource-like')) ?>
                        <?= $queryOption('tplu', $property, 'type', $translate('has type uri-like')) ?>
                        <?= $queryOption('ntpu', $property, 'type', $translate('has not type uri-like')) ?>
                    </optgroup>
                    <optgroup label="<?= $translate('Curation') ?>">
                        <?= $queryOption('dup', $property, 'type', $translate('has duplicate values')) ?>
                        <?= $queryOption('ndup', $property, 'type', $translate('has not duplicate values')) ?>
                        <?= $queryOption('dupt', $property, 'type', $translate('has duplicate values and type')) ?>
                        <?= $queryOption('ndupt', $property, 'type', $translate('has not duplicate values and type')) ?>
                        <?= $queryOption('dupl', $property, 'type', $translate('has duplicate values and language')) ?>
                        <?= $queryOption('ndupl', $property, 'type', $translate('has not duplicate values and language')) ?>
                        <?= $queryOption('duptl', $property, 'type', $translate('has duplicate values, type and language')) ?>
                        <?= $queryOption('nduptl', $property, 'type', $translate('has not duplicate values, type and language')) ?>
                        <?= $queryOption('dupv', $property, 'type', $translate('has duplicate simple values')) ?>
                        <?= $queryOption('ndupv', $property, 'type', $translate('has not duplicate simple values')) ?>
                        <?= $queryOption('dupvt', $property, 'type', $translate('has duplicate simple values and type')) ?>
                        <?= $queryOption('ndupvt', $property, 'type', $translate('has not duplicate simple values and type')) ?>
                        <?= $queryOption('dupvl', $property, 'type', $translate('has duplicate simple values and language')) ?>
                        <?= $queryOption('ndupvl', $property, 'type', $translate('has not duplicate simple values and language')) ?>
                        <?= $queryOption('dupvtl', $property, 'type', $translate('has duplicate simple values, type and language')) ?>
                        <?= $queryOption('ndupvtl', $property, 'type', $translate('has not duplicate simple values, type and language')) ?>
                        <?= $queryOption('dupr', $property, 'type', $translate('has duplicate linked resources')) ?>
                        <?= $queryOption('ndupr', $property, 'type', $translate('has not duplicate linked resources')) ?>
                        <?= $queryOption('duprt', $property, 'type', $translate('has duplicate linked resources and type')) ?>
                        <?= $queryOption('nduprt', $property, 'type', $translate('has not duplicate linked resources and type')) ?>
                        <?= $queryOption('duprl', $property, 'type', $translate('has duplicate linked resources and language')) ?>
                        <?= $queryOption('nduprl', $property, 'type', $translate('has not duplicate linked resources and language')) ?>
                        <?= $queryOption('duprtl', $property, 'type', $translate('has duplicate linked resources, type and language')) ?>
                        <?= $queryOption('nduprtl', $property, 'type', $translate('has not duplicate linked resources, type and language')) ?>
                        <?= $queryOption('dupu', $property, 'type', $translate('has duplicate uris')) ?>
                        <?= $queryOption('ndupu', $property, 'type', $translate('has not duplicate uris')) ?>
                        <?= $queryOption('duput', $property, 'type', $translate('has duplicate uris and type')) ?>
                        <?= $queryOption('nduput', $property, 'type', $translate('has not duplicate uris and type')) ?>
                        <?= $queryOption('dupul', $property, 'type', $translate('has duplicate uris and language')) ?>
                        <?= $queryOption('ndupul', $property, 'type', $translate('has not duplicate uris and language')) ?>
                        <?= $queryOption('duputl', $property, 'type', $translate('has duplicate uris, type and language')) ?>
                        <?= $queryOption('nduputl', $property, 'type', $translate('has not duplicate uris, type and language')) ?>
                    </optgroup>
                </select>
                <?= $queryText($isSubQuery ? [] : $property, $index) ?>
                <?= $dataTypeHelper->getSelect($stem . '[text]', "property[$index][text]" ?? null, ['multiple' => false, 'class' => 'query-text query-data-type chosen-select', 'aria-label' => 'Data types', 'data-placeholder' => $translate('Select data typeâ€¦')]) // TODO Manage search on property for multiple data types. ?>
                <?= $formSelect($selectMainDataType->setName($stem . '[text]')->setValue("property[$index][text]" ?? null)) ?>
                <button type="button" class="o-icon-delete remove-value button" aria-label="<?= $translate('Remove value') ?>" title="<?= $translate('Remove value') ?>"></button>
            </div>
            <div class="value-common sub-query">
                <?= $formQuery($queryInput) ?>
            </div>
        </div>
        <?php
            ++$index;
        endforeach;
        ?>
    </div>
</div>
